
makeEmpty(BinaryNode* & t) Time Complexity Analysis.
----------------------------------------------------

Time complexity is O(n), where n is the number of nodes.
---------------------------------------------------------

The time complexity of the function is O(n), n is the numner of nodes or items in the tree.
This is because makeEmpty needs to visit each node or item in the list and deletes it. So it is has
a time complexity of O(n).

//Code
void BET::makeEmpty(BinaryNode* &t)
{
    if(t != nullptr)
    {
        if(t ->left != nullptr)
            makeEmpty(t->left);
        if(t ->right != nullptr)
            makeEmpty(t->right);
        delete t;
        t = nullptr;
    }
    return;
}

The makeEmpty function is written recursively. The makeEmpty function does a post order traversal ie.. it
visits the left node first and the right node next and the parent node at the end. So it visits
ech node atleast once, which takes O(n) time-complexity. In other words, if the number of nodes doubles
then the time taken also doubles.

We do the taversal in this sequence because any ordering that would delete the parent node before deleting
any child node would make accessing child node impossible.




