How does the program take input:
-------------------------------
To store the input we use a while loop, we use two strings named 'line' and 'input'. In the while loop
the string called 'line' is used to store each line in the file and the contents of 'line' are then
concatinated with another string called 'input' each time we go through a while loop. After it is
concatinated with 'input'. Then 'line' is cleared. Therefore after we read the entire file, the file's
content is stored in string 'input'.

This step has a O(n) time complexity where n is the number of characters.
//Code
while(std::getline(std::cin, temp))
{
    input += temp;
    input += '\n';
    temp.clear();
}


How does the program store the data:
------------------------------------

The input is stored in the string named 'input'.
The program then parses the string into words, numbers and letters seperately and stores the data
into unorderd_maps.

std::unordered_map<char, int> char_count;          // map to store the char and the number of times
                                                   //it appears in a string
std::unordered_map<std::string, int> string_count; // map to store the string and number of times it
                                                   //appears in the file
std::unordered_map<std::string, int> num_count;    // map to store the number and number of times it
                                                   //it appears in the file
std::unordered_map<std::string, int>string_index;  // map to stre the first index that the string
                                                   //appears
To compute the number of times a character appears in the string:
-----------------------------------------------------------------
To compute the number of times each time a character appers in the string 'input' we use an
unordered_map<char, int> called 'char_count'. We then use a for toop to iterate through
entire string and we increment the value of the character each time we find it in the string.
If we do not find a character we insert it into the unordered_map with a value of 1. We use the
STL function called 'find' function which returns an iterator, if the key we are searching for is
not found the find function returns an iterator that points to the end of the unordered_map. After storing all this data the program creates thre vector called letters,words and numbers.

std::vector<std::pair<std::string, std::pair<int, int>>> words;
std::vector<std::pair<std::string, std::pair<int, int>>> numbers;
std::vector<std::pair<char, int>> letters;


//CODE
for(int i = 0; i < input.size(); i++)
{
    auto itr = char_count.find(input[i]);
    if(itr == char_count.end())
    char_count[input[i]] = 1;
    else
    char_count[input[i]]++;
}

//Code
std::vector<std::pair<char, int>> letters;

//we iterate through the unordered list and insert pairs into a vector
for(auto itr = char_count.begin(); itr != char_count.end(); itr++)
{
letters.push_back(std::pair<char, int>(itr->first, itr->second));
}

//clear uordered_map
char_count.clear();

This block of code takes O(n) time where n is the number of keys in the unorderd_map.




To compute the number of times a word appears in the string:
------------------------------------------------------------
In this assignment a word is defined as sequence of letters seperated by non-letter characters.
To find the words in the string we iterate through the string and store teh word in a string and
then we increment the value for the string if it is already in the unorderd_map called
string_count if it is not found in the unorderd_map we insert a key value pair into the string_count
the value is set to 1. We convert each string to lower case because the program should be case
insensitive. We also use an unorderd_map called string_index to store the first index that a string
appeared in.

//CODE
for(int i = 0; i < input.size(); i++)
{
    std::string temp = "";
    while(i < input.size() && isalpha(input[i]) && input[i] != ' ' && input[i] != '\n')
    {
        temp += static_cast<char>(std::tolower(input[i]));
        i++;
    }

    //if the string is empty we do nothing
    // we need to cintinue the for loop
    if(temp == "")
        continue;

    //in the string_count
    auto itr = string_count.find(temp);
        if(itr == string_count.end())
            string_count[temp] = 1;
        else
        string_count[temp]++;

    //in the string_index
    auto itr_ = string_index.find(temp);
    if(itr_ == string_index.end())
        string_index[temp] = i - static_cast<int>(temp.size());

}

We then use the unorderd_maps string_count and string_index and create vector of pair<string,
pair<int,int>>. We store the the number of times a string appears in the input file in the first
value in the immbeded pair (ie ... the pair<int, int> the first value in this pair), and the second
value in the pair is the first index the string appeared. We store all this data in a vector called
words. To store the values into the vectoe we iterate throught the 'string_count' hash_map and
insert the string and the number of times it appeared in the string, We also use the hash_map
called string_index to get the value of the index when the string first appeared in the file. Then
we clear the hash_map string_count .

//CODE
std::vector<std::pair<std::string, std::pair<int, int>>> words;

for(auto itr = string_count.begin(); itr != string_count.end(); itr++)
{
    std::pair<int, int>p;
    p.first = itr->second;
    p.second = string_index[itr->first];
    words.push_back(std::pair<std::string, std::pair<int, int>>(itr->first, p));
}
//clear unordered_map
string_count.clear();


To compute the number of times a number appears in the string:
--------------------------------------------------------------
In this assignment a number is defined as sequence of numbers seperated by non-digit characters.
We use a similar procedure to store the data for numbers as we did to store the words.


This step also takes O(n) time where n is number of characters, because we iterate through
the entire string.


How do we compute the top 10 most occuring items in the file
-------------------------------------------------------------

To find the ten most used characters or string, we need to know the 10 most occuring
values, so we do not need to sort the entire vector. The to know the the 10 highest values we
can create a priority queue ie .. a max heap and pop the root 10 times. So instead of sorting which
would take n(logn) time we are performing 10 extract max operations on a max-heap which takes 10(logn)
           ------                         --------------                                       --------
time on total.

This step takes O(n) time where n is the number of characters.

We then heapify the vector to create a max-heap. This takes O(n) time.
        -------                                             ----

Since the priority of a character only depends on the number of times it appears
and not the postion it is sufficient to create a function that compares two pairs
where one pair is given higher priority according to the given specifications.


we heapify all the three arrays. To make a max-heap out of these vectors we use the STL
function called make_heap. This function takes an optional parameter where we can pass in
a function. To break the ties (ie... the scenarios when the number of times
a string appears in the file or a character appears in the file) we have to define functions that
orders the heap in a manner that is mentioned in the website. TO break the ties we create two functions
called compare and compare_str which gives the priority accoridng to the rules mentioed in the website.

Build-heap O(n) time where n is the number of items in the vector

If the size of the heap is greater than 10  we extract the maximum element 10 times else we extract the
maximum element till the size becomes 0.
Each extract max operation takes log(n) time since we call it atmost 10 times it takes 10*log(n) ie
O(logn).


So the entire program takes
---------------------------
input --> O(n)
parsing into words and numbers --> O(n)
Builiding a vector --> O(n)
Make heap -->O(n)
Extracting the maximum --> O(10*logn) = O(logn)

So on the whole the entire program takes O(n) time.
Data Structures used:
--------------------
1) Priority queues (in heapify)
2) unordered_map (hash table)
3) vector
4) pair
