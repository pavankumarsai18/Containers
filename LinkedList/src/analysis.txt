
Analysis of Reverse and Remove_if
----------------------------------

Remove_if --> O(n)*O(predicate) = O(n*predicate)
---------
The remove-if function  iterates through all the the elements in the list and calls the predicate functor.
So, the Complexity of the Remove if function depends on the Complexity of Predicate (functor) and the size
of the List. So, the complexity is O(n) (where n is the size of list) times the O(predicate) (which is the complexity
of the predicate function), which is equal to O(n*predicate).

Therefore Remove-if --> O(n* predicate).


Reverse --> O(n)
-------
The reverse function iterate though half of the list and swaps the eleements. TO implement the Reverse function,
I constructed two pointers, one is called a forwad (since it moves forward) and the other a backward (since it moves backward)
. The function iterates for "size/2" times and swaps the values of that forward and backward pointers point to.
So, the compleity of this function depends linearly on the size (n), (since if we linearly grow the size the
function also grows linearly) and the swap time takes constant time (O(1)). So, it is O(n)*O(1) == O(n)

Therefore Reverse --> O(n).
